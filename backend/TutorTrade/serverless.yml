service: tutor-api

frameworkVersion: "2"

provider:
  name: aws
  runtime: java11
  lambdaHashingVersion: 20201221

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"

  # change stage when deploying dev stack
  stage: prod
  region: us-east-1

package:
  artifact: target/${self:service}-${self:provider.stage}.jar

functions:
  user:
    handler: com.tutor.user.UserHandler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: /user/create
          method: post
          integration: lambda
          request:
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\
      - http:
          path: /user/{id}
          method: get
          integration: lambda
          request:
            parameters:
              paths:
                id: true
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\
      - http:
          path: /user/{id}
          method: patch
          integration: lambda
          request:
            parameters:
              paths:
                id: true
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\
      - http:
          path: /user/{id}
          method: delete
          integration: lambda
          request:
            parameters:
              paths:
                id: true
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\
  request:
    handler: com.tutor.request.RequestsHandler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: /request/create
          method: post
          integration: lambda
          request:
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\
      - http:
          path: /request/{requestId}
          method: get
          integration: lambda
          request:
            parameters:
              paths:
                requestId: true
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\
      - http:
          path: /request/{requestId}
          method: patch
          integration: lambda
          request:
            parameters:
              paths:
                requestId: true
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\
      - http:
          path: /request/{requestId}
          method: delete
          integration: lambda
          request:
            parameters:
              paths:
                requestId: true
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\
  matching:
    handler: com.tutor.matching.MatchingHandler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: /match/{requestId}
          method: get
          integration: lambda
          request:
            parameters:
              paths:
                requestId: true
            template:
              application/json: ${file(./mapping_template.yml):mapping_template}\

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: S
        KeySchema:
          - AttributeName: userID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    requestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: requestTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1